/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var geometry = 
    /* color: #d63000 */
    /* shown: false */
    /* displayProperties: [
      {
        "type": "rectangle"
      }
    ] */
    ee.Geometry.Polygon(
        [[[-0.06395574689128214, 51.93581449103455],
          [-0.06395574689128214, 51.201736834752346],
          [1.5208220851399679, 51.201736834752346],
          [1.5208220851399679, 51.93581449103455]]], null, false);
/***** End of imports. If edited, may not auto-convert in the playground. *****/
// The original ESA method
var WCv1001st = ee.ImageCollection("ESA/WorldCover/v100").first();

var visualization = {
  bands: ['Map'],
};

Map.addLayer(WCv1001st, visualization, "ESA Worldcover", false);
Map.centerObject(geometry);

// Alternative method that remaps and includes a legend

var WCv100 = ee.ImageCollection("ESA/WorldCover/v100");

var dict = {
  "names": [
    "Trees",	
    "Shrubland",
    "Grassland",
    "Cropland",
    "Built-Up",
    "Barren/Sparse",
    "Snow/Ice",
    "Open Water",
    "Herbaceous Wetland",
    "Mangroves",
    "Moss/Lichen"
  ],
  "colours": [
    '#006400',
    '#ffbb22',
    '#ffff4c',
    '#f096ff',
    '#fa0000',
    '#b4b4b4',
    '#f0f0f0',
    '#0064c8',
    '#0096a0',
    '#00cf75',
    '#fae6a0'
  ]};

var WCmosaic = WCv100.mosaic().remap([10,20,30,40,50,60,70,80,90,95,100],[0,1,2,3,4,5,6,7,8,9,10]);

// Add image to the map
Map.addLayer(WCmosaic, {min:0, max:10, palette:dict['colours']}, 'WorldCover 2021 10m');

// LEGEND
// Create a panel to hold the legend widget
var legend = ui.Panel({
  style: {
    position: 'bottom-left',
    padding: '8px 15px'
  }
});

// Function to generate the legend
function addCategoricalLegend(panel, dict, title) {
  
  // Create and add the legend title.
  var legendTitle = ui.Label({
    value: title,
    style: {
      fontWeight: 'bold',
      fontSize: '18px',
      margin: '0 0 4px 0',
      padding: '0'
    }
  });
  panel.add(legendTitle);
  
  var loading = ui.Label('Loading legend...', {margin: '2px 0 4px 0'});
  panel.add(loading);
  
  // Creates and styles 1 row of the legend.
  var makeRow = function(color, name) {
    // Create the label that is actually the colored box.
    var colorBox = ui.Label({
      style: {
        backgroundColor: color,
        // Use padding to give the box height and width.
        padding: '8px',
        margin: '0 0 4px 0'
      }
    });
  
    // Create the label filled with the description text.
    var description = ui.Label({
      value: name,
      style: {margin: '0 0 4px 6px'}
    });
  
    return ui.Panel({
      widgets: [colorBox, description],
      layout: ui.Panel.Layout.Flow('horizontal')
    });
  };
  
  // Get the list of palette colors and class names from the image.
  var palette = dict['colours'];
  var names = dict['names'];
  loading.style().set('shown', false);
  
  for (var i = 0; i < names.length; i++) {
    panel.add(makeRow(palette[i], names[i]));
  }
  Map.add(panel);
}

// Add the legend to the map
addCategoricalLegend(legend, dict, 'ESA WorldCover 2020 10m');

var WCMaskWater = WCmosaic.eq(7);

//FILTERING AND MASKING
// Filter collection to ROI and dates of interest
// Finally, apply the mask to every image in the collection using map
var L8_Water = ee.ImageCollection('LANDSAT/LC08/C02/T1_L2')
.filterBounds(geometry)
.filterDate('2020-01-01','2022-01-01')
.map(function(image){
  return image.updateMask(WCMaskWater)})
.map(function(image) {
  return image.clip(geometry)})
// Applies Collection 2 scaling factors.
.map(function ScaleFactors(image) {
  var opticalBands = image.select('SR_B.').multiply(0.0000275).add(-0.2);
  return image.addBands(opticalBands, null, true);
});

var L8Vis = 
{
  min: 0,
  max: 0.35,
  bands: ['SR_B4', 'SR_B3', 'SR_B2']
};

Map.addLayer(L8_Water, L8Vis, 'Landsat 8 Land Masked');