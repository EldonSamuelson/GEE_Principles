/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var ThamesWS = ee.FeatureCollection("users/SeamusWOD/Shapefiles/Polygons/Thames_River_Basin");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
var s2ToA = ee.ImageCollection('COPERNICUS/S2');
var s2SR = ee.ImageCollection('COPERNICUS/S2_SR_HARMONIZED');
var s2Clouds = ee.ImageCollection('COPERNICUS/S2_CLOUD_PROBABILITY');

var START_DATE = ee.Date('2022-04-25');
var END_DATE = ee.Date('2022-04-27');
var MAX_CLOUD_PROBABILITY = 20;
var region = ThamesWS;
Map.centerObject(ThamesWS);

function maskClouds(img) {
  var clouds = ee.Image(img.get('cloud_mask')).select('probability');
  var isNotCloud = clouds.lt(MAX_CLOUD_PROBABILITY);
  return img.updateMask(isNotCloud).divide(10000);
}

// The masks for the 10m bands sometimes do not exclude bad data at
// scene edges, so we apply masks from the 20m and 60m bands as well.
// Example asset that needs this operation:
// COPERNICUS/S2_CLOUD_PROBABILITY/20190301T000239_20190301T000238_T55GDP
function maskEdges(s2_img) {
  return s2_img.updateMask(
      s2_img.select('B8A').mask().updateMask(s2_img.select('B9').mask()));
}

// Filter input collections by desired data range and region.
var criteria = ee.Filter.and(
    ee.Filter.bounds(region), ee.Filter.date(START_DATE, END_DATE));

s2ToA = s2ToA.filter(criteria).map(maskEdges);
s2SR = s2SR.filter(criteria).map(maskEdges);
s2Clouds = s2Clouds.filter(criteria);

// Join S2's with cloud probability dataset to add cloud mask.
var s2ToAWithCloudMask = ee.Join.saveFirst('cloud_mask').apply({
  primary: s2ToA,
  secondary: s2Clouds,
  condition:
      ee.Filter.equals({leftField: 'system:index', rightField: 'system:index'})
});

var s2SRWithCloudMask = ee.Join.saveFirst('cloud_mask').apply({
  primary: s2SR,
  secondary: s2Clouds,
  condition:
      ee.Filter.equals({leftField: 'system:index', rightField: 'system:index'})
});

var s2ToACloudMasked =
    ee.ImageCollection(s2ToAWithCloudMask).map(maskClouds);
var ToArgbVis = {min: 0, max: 0.35, bands: ['B4', 'B3', 'B2']};

var s2SRCloudMasked =
    ee.ImageCollection(s2SRWithCloudMask).map(maskClouds);
var SRrgbVis = {min: 0, max: 0.35, bands: ['B4', 'B3', 'B2']};

Map.addLayer(
    s2ToACloudMasked, ToArgbVis, 'S2 TOA masked at ' + MAX_CLOUD_PROBABILITY + '%',
    true);

Map.addLayer(
    s2SRCloudMasked, SRrgbVis, 'S2 SR masked at ' + MAX_CLOUD_PROBABILITY + '%',
    true);