//Source: https://gis.stackexchange.com/questions/421943/automate-max-and-mix-values-of-a-raster-in-my-color-palette-on-google-earth-engi
// Worth visiting for more context and application of Legends also.
// e.g. More developed: https://code.earthengine.google.com/967aa5da56bb42c29af5a8e9f0123645

// Pull the package from the GitHub repo which stores colour palettes to be used in GEE
// See https://github.com/gee-community/ee-palettes for more info
var palettes = require('users/gena/packages:palettes');
var HSpalette = palettes.niccoli.cubicl[7];

// Define region of interest
var regionOfInterest = ee.FeatureCollection("FAO/GAUL/2015/level0").filter(ee.Filter.eq('ADM0_NAME', 'Switzerland'));

// Image of interest
var img = ee.Image("WWF/HydroSHEDS/03VFDEM").clip(regionOfInterest);

// Centre the Map on the RoI
Map.centerObject(regionOfInterest,8);

// Calculate min/max values
var minMax = img.reduceRegion({reducer: ee.Reducer.minMax(), 
                               geometry: regionOfInterest, 
                               scale: img.projection().nominalScale(),
                               bestEffort: true,
                               maxPixels: 1e9,
});
/* NOTE: Nominal Scale is the true-scale of the image. For this reason, the scale bar will show different 
*        min/max values than what is shown at whatever zoom level you are looking at.
*        EXAMPLE: At the defaut zoom for this DEM of Switzerland, the min/max of the layer is 201/3726m
*        The true min/max at true scale is 116/4420m
*        This doesn't matter when you're only using GEE as a visualisation tool, but this scale issue
*        can cause problems unless you set '.nominalScale()' when you export the results for analysis later.
*/
                               
// Rename keys
var minMax = minMax.rename(minMax.keys(), ['max','min']);  

// Retrieve dictionary values and pass to visParam settings
minMax.evaluate(function(val){
  var min = val.min;
  var max = val.max;
var visParam = {
        min: min,
        max: max,
        palette: HSpalette
        };
        
Map.addLayer(img, visParam, "Switzerland DEM");

// Legend Stuff

var nSteps = 7;
// Creates a color bar thumbnail image for use in legend from the given color palette
function makeColorBarParams(palette) {
  return {
    bbox: [0, 0, nSteps, 0.1],
    dimensions: '100x10',
    format: 'png',
    min: 0,
    max: nSteps,
    palette: HSpalette,
  };
}

// Create the colour bar for the legend
var colorBar = ui.Thumbnail({
  image: ee.Image.pixelLonLat().select(0).int(),
  params: makeColorBarParams(visParam.palette),
  style: {stretch: 'horizontal', margin: '0px 8px', maxHeight: '24px'},
});

// Create a panel with three numbers for the legend
var legendLabels = ui.Panel({
  widgets: [
    ui.Label(visParam.min, {margin: '4px 8px'}),
    ui.Label(
        ((visParam.max-visParam.min) / 2+visParam.min),
        {margin: '4px 8px', textAlign: 'center', stretch: 'horizontal'}),
    ui.Label(visParam.max, {margin: '4px 8px'})
  ],
  layout: ui.Panel.Layout.flow('horizontal')
});

// Legend title
var legendTitle = ui.Label({
  value: 'Height (m)',
  style: {fontWeight: 'bold'}
});

// Add the legendPanel to the map
var legendPanel = ui.Panel([legendTitle, colorBar, legendLabels]);
Map.add(legendPanel);
})