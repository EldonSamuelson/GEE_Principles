/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var aoi = 
    /* color: #8b8882 */
    /* shown: false */
    /* displayProperties: [
      {
        "type": "rectangle"
      }
    ] */
    ee.Geometry.Polygon(
        [[[-77.3521644558211, 39.15789441161912],
          [-77.3521644558211, 38.65884862366653],
          [-76.6984779323836, 38.65884862366653],
          [-76.6984779323836, 39.15789441161912]]], null, false),
    Rural = 
    /* color: #ffa343 */
    /* shown: false */
    ee.Geometry.MultiPolygon(
        [[[[-77.27800674097735, 39.12860481849034],
           [-77.30135268824297, 39.14990769616968],
           [-77.3356849636336, 39.147777698471025],
           [-77.33431167261797, 39.09130927402061],
           [-77.28761977808672, 39.09344097963858]]],
         [[[-77.2807533230086, 38.94940628126506],
           [-77.22170180933672, 38.94940628126506],
           [-77.2477943386336, 38.98784422329465],
           [-77.28899306910235, 39.00492105720018],
           [-77.31645888941485, 39.0017194647532]]],
         [[[-76.71770835908849, 39.03799730742311],
           [-76.75753079506836, 39.07851623779237],
           [-76.81383147204804, 39.076384243337976],
           [-76.8124582884992, 39.041197014757444],
           [-76.76576991739103, 39.025197021188774]]],
         [[[-76.72319717066485, 38.770824265640876],
           [-76.77950210230547, 38.79651633794212],
           [-76.82207412378985, 38.77510692055246],
           [-76.8193275417586, 38.74190961999463],
           [-76.74104995386797, 38.73655377057147]]]]),
    Urban = 
    /* color: #bf04c2 */
    /* shown: false */
    ee.Geometry.MultiPolygon(
        [[[[-77.03081435816485, 38.885296702231],
           [-77.01776569233175, 38.8697933858209],
           [-77.01227492945391, 38.8510812487952],
           [-76.97794265406328, 38.869260258928065],
           [-76.95871657984453, 38.88743462124696],
           [-76.93640204750183, 38.87647848184095],
           [-76.92026443140703, 38.89812325122889],
           [-76.90378493921953, 38.94086168394609],
           [-76.93125075953203, 38.97396626148844],
           [-76.97107619898516, 38.982506867596165],
           [-77.02738113062578, 38.99104644355398],
           [-77.02600932980451, 38.96328449292715],
           [-77.03012711285606, 38.949402841487284],
           [-77.03390426295, 38.93712309878202],
           [-77.04162917422484, 38.932315850270136],
           [-77.03768081324297, 38.925906160650115],
           [-77.04798006165615, 38.91602224798074],
           [-77.04935378687578, 38.91041318707883],
           [-77.05072707789141, 38.90560433511202]]],
         [[[-77.05347365992266, 38.843861823456116],
           [-77.0716642630131, 38.86431393470722],
           [-77.09329909937578, 38.88315871887769],
           [-77.11939162867266, 38.885296702231024],
           [-77.14102096216875, 38.87834802110431],
           [-77.12608069129536, 38.85214870732327],
           [-77.11218185084063, 38.832362707695914],
           [-77.10428542750078, 38.82326906822631],
           [-77.04660720484453, 38.79651633794212],
           [-77.04797694684406, 38.82246343144293]]]]);
/***** End of imports. If edited, may not auto-convert in the playground. *****/

/* 
Author: Sean McCartney (sean.mccartney@nasa.gov)
ARSET Training: Satellite Remote Sensing for Measuring Urban Heat Islands and Constructing Heat Vulnerability Indices
August 2, 2022 - August 11, 2022

This code is free and open. 
By using this code you agree to cite the following reference in any publications derived from them:
NASA Applied Remote Sensing Training (ARSET) program

This example shows how to analyze and visualize Landsat surface temperature (ST) time series 
from Landsat 8 over Washington, DC (USA) from a defined area of interest (aoi).

Parameters:
In: DATE_RANGE
    YEAR_RANGE
    STUDYBOUNDS
    DISPLAY
    aoi: delineated rectangle for area of interest
    Rural: delineated polygons for rural areas 
    Urban: delineated polygons for urban areas
    
Out: clipped image of mean daytime surface temperature (ST) and surface urban heat island (SUHI).
*/


//****************** DEFINE THE STUDY AREA *****************//
// Use the "Draw a rectangle" tool in the map window to define your 
// area of interest (aoi) for filtering the image collection.


// Assign a variable to filter the day of year from July 1 to August 31.
// Adjust the DATE_RANGE for your own UHI study.
var DATE_RANGE = ee.Filter.dayOfYear(182, 243);
// Assign a variable to filter years from 2010 â€“ 2022.
// Adjust the YEAR_RANGE for your own UHI study.
var YEAR_RANGE = ee.Filter.calendarRange(2013, 2022,'year');
// Assign a variable to delineate your area of interest
// Create your own aoi using the Geometry tools in the map window. Rename your geometry to match the assigned variables.
var STUDYBOUNDS = aoi;
// Assign a variable to display images in the map window
var DISPLAY = true;

// Set the basemap to display as satellite.
Map.setOptions('SATELLITE');
/* Other basemap options are below
Map.setOptions('HYBRID');
Map.setOptions('ROADMAP');
Map.setOptions('TERRAIN');
*/

// Center the map view at defined coordinates (longitude/latitude) with the given zoom level.
// Zoom level ranges from 0 to 24, with 0 being global and 24 being the smallest region possible.
// Latitude must be within [-85, 85].
// Adjust the long/lat for your own aoi.
Map.setCenter (-76.998004, 38.90812, 10);

// Assign a variable to the sensor-specific bands unique to each Landsat mission.
var LC08_bands = ['ST_B10', 'QA_PIXEL']; // Landsat 8 surface temperature (ST) & QA_Pixel bands

// Assign a variable for the band names used later in the script.
// var bandName = ['ST', 'QA_PIXEL'];

//****************** CLOUD MASK FUNCTION *****************//
// Create a function to mask clouds and cloud shadows based on the QA_PIXEL band of Landsat 8 & 9
// For information on bit values for the QA_PIXEL band refer to: 
// https://developers.google.com/earth-engine/datasets/catalog/LANDSAT_LC08_C02_T1_L2#bands
function cloudMask(image) {
  var qa = image.select('QA_PIXEL');
  var mask = qa.bitwiseAnd(1 << 3)
    .or(qa.bitwiseAnd(1 << 4));
  return image.updateMask(mask.not());
}

/* Assign variables to import the Landsat Collection 2, Tier 1, Level 2 image collections, selecting 
the ST and QA_PIXEL bands, and spatially filtering the image collection by your aoi. */
var L8 = ee.ImageCollection('LANDSAT/LC08/C02/T1_L2')
  .select('ST_B10', 'QA_PIXEL')
  .filterBounds(STUDYBOUNDS)
  .filter(DATE_RANGE)
  .filter(YEAR_RANGE)
  .map(cloudMask);

// Filter the collections by the CLOUD_COVER property so each image contains less than 20% cloud cover.	
var filtered_L8 = L8.filter(ee.Filter.lt('CLOUD_COVER', 20));

// Use print statements to print the argument to the console.
print(filtered_L8, 'Landsat 8 ST');

/* Create a funtion using Landsat scale factors for deriving ST in Kelvin and Celsius.
For more information on ST scale factors, refer to:
https://www.usgs.gov/landsat-missions/landsat-collection-2-level-2-science-products */
function applyScaleFactors(image) {
  var thermalBands = image.select('ST_B10').multiply(0.00341802).add(149.0) // Scale factors for Kelvin
  .subtract(273.15); // Scale factor for degrees Celsius
  return image.addBands(thermalBands, null, true);
}

// Use print statements to print the argument to the console.
print(filtered_L8, 'Landsat ST (Celsius)');

// Define a variable to apply scale factors to the filtered image collection.
var landsatST = filtered_L8.map(applyScaleFactors);

// Use a print statement for tracking your progress in the console tab.
print("... Computing mean ST across image collection");

//****************** CALCULATE MEAN SURFACE TEMPERATURE *****************//
// Define a variable to calculate mean ST for each pixel geography 
// throughout the filtered image collection.
var mean_LandsatST = landsatST.mean();

// Define a variable to use the clip funtion to subset your imagery to the aoi.
var clip_mean_ST = mean_LandsatST.clip(STUDYBOUNDS);

// Use a print statement to print the argument to the console.
print(clip_mean_ST, 'Mean ST clipped to study area');

// Define a variable to select the temperature band.
var values_ST = clip_mean_ST.select("ST_B10"); 

// Define a variable to output a histogram of mean ST values within your aoi.
var histogram_ST_values = ui.Chart.image.histogram(values_ST, STUDYBOUNDS, 30);

// Use  print statement to output the histogram values of mean ST to the console tab.
 print(histogram_ST_values);

// Add the image to the map window, defining min/max values, a palette for 
// symbology, assign a name to the visualization, and display the result.
Map.addLayer(clip_mean_ST, {
  bands: "ST_B10", 
  min: 28, max: 47, 
  palette: ['blue','white','red']}, "ST", DISPLAY);

print('... Mean/Min/Max ST for urban Washington, DC');
// Define a variable to compute the mean, min, and max for an urban polygon layer. 
// Polygon was created using the "Draw a shape" tool.
var statsUrban = clip_mean_ST.reduceRegions({
  collection: Urban,
  reducer: ee.Reducer.mean().combine({
  reducer2: ee.Reducer.minMax(),
  sharedInputs: true
  }),
  scale: 30});
  
// print the statistics to the console.
print (statsUrban);

print('... Mean/Min/Max ST for rural Washington, DC');
// Define a variable to compute the mean, min, and max for a rural polygon layer. 
// Polygon was created using the "Draw a shape" tool.
var statsRural = clip_mean_ST.reduceRegions({
  collection: Rural,
  reducer: ee.Reducer.mean().combine({
  reducer2: ee.Reducer.minMax(),
  sharedInputs: true
  }),
  scale: 30});
  
// print the statistics to the console.
print (statsRural);

//****************** CALCULATE SUHI *****************//
/* To calculate the surface urban heat island (SUHI) intensity for your aoi, find the Mean/Min/Max ST
under the Console tab --> FeatureCollection --> features --> properties --> ST_B10_mean

Subtract the mean urban temperature from the mean rural temperature.
(ST_B10_mean [Urban]) - (ST_B10_mean [Rural]) = SUHI intensity

The intensity of the heat island is the simplest quantitative indicator of the 
thermal modification imposed by a city upon the geography in which it is situated, and 
of its relative warming in relation to the surrounding rural environment. */