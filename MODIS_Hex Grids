/**
 * Generates a hex grid with a unique ID in each grid cell.
 * 
 * Args:
 *    proj: Projection to use
 *    diameter: size of each hexagon from edge to edge in projection units.
 * Returns an image containing unqiue IDs in a hexagonal grid pattern.
 * 
 * Based on http://playtechs.blogspot.com/2007/04/hex-grids.html
 */

// Country, String. Used the Printed List of Countries to check availability
var Country = 'Kyrgyzstan';
// EPSG Projection, 3857 is Web-Mercator, but local scales are better
var Projection = '3857';
// Scale of Hexes in meters - cannot be smaller than image resolution
var hexScale = 25000;

// Script Internals, don't edit past here.

var hexGrid = function(proj, diameter) {
  var size = ee.Number(diameter).divide(Math.sqrt(6)); // Distance from center to vertex
  
  var coords = ee.Image.pixelCoordinates(proj);
  var vals = {
    // Switch x and y here to get flat top instead of pointy top hexagons.
    x: coords.select("x"),
    u: coords.select("x").divide(diameter),  // term 1
    v: coords.select("y").divide(size),      // term 2
    r: ee.Number(diameter).divide(2),
  };
  var i = ee.Image().expression("floor((floor(u - v) + floor(x / r))/3)", vals);
  var j = ee.Image().expression("floor((floor(u + v) + floor(v - u))/3)", vals);
  
  // Turn the hex coordinates into a single "ID" number.
  var cells = i.long().leftShift(32).add(j.long()).rename("hexgrid");
  return cells;
};

// Define a region for masking hexagons.
var region = ee.FeatureCollection('USDOS/LSIB_SIMPLE/2017')
    .filter("country_na == '" + Country + "'" )
    .union().first().geometry()
    ;
print('List of Countries', ee.FeatureCollection('USDOS/LSIB_SIMPLE/2017'));

// Generate a hex grid and mask off cells that don't touch the region.

var grid = hexGrid(ee.Projection('EPSG:'+ Projection), hexScale);
var regionImg = ee.Image(0).byte().paint(region, 1);
var mask = grid.addBands(regionImg)
    .reduceConnectedComponents(ee.Reducer.max(), "hexgrid", 256);
grid = grid.updateMask(mask);

// Import MODIS veg. indices; calculate mean NDVI for April, 2020. 
var ndvi = ee.ImageCollection('MODIS/006/MOD13A2')
  .filterDate('2020-04-01', '2020-05-01').mean().select('NDVI')
  .addBands(grid);

// Calculate mean NDVI per hexagon.
var meanNdvi = ndvi.reduceConnectedComponents(ee.Reducer.mean(), "hexgrid", 256);

// Define visualization properties.
var vis = {
  min: 0,
  max: 9000,
  palette: [
    'FFFFFF', 'CE7E45', 'DF923D', 'F1B555', 'FCD163', '99B718', '74A901',
    '66A000', '529400', '3E8601', '207401', '056201', '004C00', '023B01',
    '012E01', '011D01', '011301'
  ],
  // This controls how visible the NDVI hexes are
  opacity: 1
};

Map.addLayer(ndvi,false,'Hex layer',false);

// Make a visualization composite
// background opacity does just that (ocean/masked areas)
var background = ee.Image(0).visualize({palette: '000000', opacity: 0.90});
// ndvi opacity covers the non-hexed NDVI areas
var ndvi = ndvi.select('NDVI').visualize({
  palette: vis.palette, min: vis.min, max: vis.max, opacity: 0.2
});
var composite = background.blend(ndvi).blend(meanNdvi.visualize(vis));
var compnobg = ndvi.blend(meanNdvi.visualize(vis));

// Display the results to the map.
Map.addLayer(composite,false,'Hex NDVI, Background');
Map.addLayer(compnobg,false,'Hex NDVI, No Backhround',false);
// Locks the map view to between zooms 3-7, panning allowed
Map.setLocked(false, 5, 9);
Map.centerObject(region, 6);