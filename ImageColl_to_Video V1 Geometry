/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var geom = 
    /* color: #98ff00 */
    /* displayProperties: [
      {
        "type": "rectangle"
      }
    ] */
    ee.Geometry.Polygon(
        [[[-1.0515127701823657, 50.85737629283667],
          [-1.0515127701823657, 50.75909717991664],
          [-0.8568487687175219, 50.75909717991664],
          [-0.8568487687175219, 50.85737629283667]]], null, false),
    Point = /* color: #d63000 */ee.Geometry.Point([-1.0496303711783939, 50.76332723452613]);
/***** End of imports. If edited, may not auto-convert in the playground. *****/
Map.centerObject(geom);

var Imagery = ee.ImageCollection('COPERNICUS/S2_SR_HARMONIZED')
              .filterBounds(geom)
              .filterDate('2015-01-01','2024-01-01')
              .filter(ee.Filter.lte('CLOUDY_PIXEL_PERCENTAGE', 15))
              ;

var Dataset = ee.ImageCollection('COPERNICUS/S3/OLCI')
                  .filterBounds(geom)
                  .filterDate('2015-01-01','2024-01-01')
                  ;

// Select bands for visualization and apply band-specific scale factors.
var rgbS3 = Dataset.select(['Oa08_radiance', 'Oa06_radiance', 'Oa04_radiance'])
              .median()
              // Convert to radiance units.
              .multiply(ee.Image([0.00876539, 0.0123538, 0.0115198]));
              
var RGBVisS3 = {
  bands: ['Oa08_radiance', 'Oa06_radiance', 'Oa04_radiance'],
  gamma: 2,
  min: 0,
  max: 6,
};

var RGBVis = {
  min: 0,
  max: 0.25,
  bands: ['B4', 'B3', 'B2'],
};

var NIRVis = {
  min: 0,
  max: 0.55,
  bands: ['B8', 'B3', 'B2'],
};

var Clip_Img = Imagery.map(function(img){
return img.clip(geom).divide(10000).copyProperties(img, ["system:time_start"]);
});

var VidColl = Clip_Img
  .map(function(image) {
    return image.visualize(RGBVis);
  });
  
// Property Extraction 
      var SystemIndex = Imagery.map(function (image) {
        return image.set('SysIndex', image.toDictionary(['system:index']));
      });
      var list = SystemIndex.aggregate_array('SysIndex');
      var list_1st = list.get(0);
      var S2_HR_MGRS_Mosaic = Imagery.mosaic().set(list_1st);
      var index = S2_HR_MGRS_Mosaic.get('system:index');
      var indexTile = index.getInfo().slice(31,37);
      var indexDate = index.getInfo().slice(0,9);

Map.addLayer(VidColl,null,'S2');
print("Eligible Frame Count: ");
print(list);
print("Divide by Frames per Second to get general estimate of low long the video will be");
  
Export.video.toDrive({
    folder: 'GEE_Timelapses',
    collection: VidColl,
    description: "GeometryTile"+ indexTile +"_Export",
    maxFrames: 216000,
    dimensions: 1080,
    //scale: 100,
    maxPixels: 1e13,
    framesPerSecond: 2,
    region: geom
});

// Animation Previwing

var text = require('users/gena/packages:text'); // Import gena's package which allows text overlay on image

// Define arguments for animation function parameters.
var videoArgs = {
  dimensions: 768,
  region: geom,
  framesPerSecond: 2,
  crs: 'EPSG:3857',
};

var annotations = [
  {position: 'right', offset: '1%', margin: '1%', property: 'label', scale: 200} //large scale because image if of the whole world. Use smaller scale otherwise
  ]
  
function addText(image){
  var timeStamp = ee.String(indexDate);
  var image = image.set({'label':timeStamp}); // set a property called label for each image
  var annotated = text.annotateImage(image, {}, Point, annotations); // create a new image with the label overlayed using gena's package
  return annotated; 
}

var VidCollAnim = VidColl/*.map(addText)*/; //add time stamp to all images

print(ui.Thumbnail(VidCollAnim, videoArgs));
/*
var Clip_S3 = rgbS3.map(function(img){
  return img.clip(geometry).copyProperties(img,["system:time_start"]);
});

var VidCollS3 = Clip_S3
  .map(function(image) {
    return image.visualize(RGBVisS3);
  });

Map.addLayer(VidCollS3,null,'S3');
print(VidCollS3)

Export.video.toDrive({
    folder: 'GEE_Timelapses',
    collection: VidCollS3,
    description: "GeometryTile_S3Export",
    maxFrames: 216000,
    dimensions: 1080,
    //scale: 100,
    maxPixels: 1e13,
    framesPerSecond: 2,
    region: geometry
});

*/